#!/usr/bin/python
# -*- encoding: utf-8 -*-

import sys
import time
from periphery import GPIO
import paho.mqtt.client as mqtt

# Initial setup

## Outputs and initial state

vent_red = GPIO(128, "out")
vent_green = GPIO(12, "out")
illum_red = GPIO(129, "out")
illum_green = GPIO(13, "out")

outputs = [vent_red, vent_green, illum_red, illum_green]
for pin in outputs:
    pin.write(False)

illum_status = 'off'
vent_status = 'off'
system_mode = 'automatic'

## Test LEDs

for pin in outputs:
    pin.write(True)
    time.sleep(0.5)
    pin.write(False)

## MQTT broker host

broker = "mosquitto"

# Hardware I/O functions

## Update capacitive switch LEDs

def set_illum_ind(state):
    if state == 'on':
        if system_mode == 'automatic':
            illum_red.write(False)
            illum_green.write(True)
        elif system_mode =='manual':
            illum_red.write(True)
            illum_green.write(False)
    elif state == 'off':
        illum_red.write(False)
        illum_green.write(False)
    else:
        print "Invalid command"

def set_vent_ind(state):
    if state == 'on':
        if system_mode == 'automatic':
            vent_red.write(False)
            vent_green.write(True)
        elif system_mode =='manual':
            vent_red.write(True)
            vent_green.write(False)
    elif state == 'off':
        vent_red.write(False)
        vent_green.write(False)
    else:
        print "Invalid command"

# MQTT

## The callback for when the client receives a CONNACK response from the server.

def on_connect(client, userdata, flags, rc):
        print("Connected with result code "+str(rc))
        client.subscribe([("actuator/#", 0), ("greenhouse/mode", 0)])

## The callback for when a PUBLISH message is received from the server.

def on_message(client, userdata, msg):
        if msg.topic.startswith('actuator'):
            topic = msg.topic.lstrip('actuator/')
        elif msg.topic.startswith('greenhouse'):
            topic = msg.topic.lstrip('greenhouse/')
        else:
            return
        if topic == 'illumination':
            global illum_status
            if msg.payload != illum_status:
                set_illum_ind(msg.payload)
                illum_status = msg.payload
        elif topic == 'ventilation':
            global vent_status
            if msg.payload != vent_status:
                set_vent_ind(msg.payload)
                vent_status = msg.payload
        elif topic == 'mode':
            global system_mode
            if msg.payload != system_mode:
                print "Set mode to: ", msg.payload
                system_mode = msg.payload
                set_illum_ind(illum_status)
                set_vent_ind(vent_status)
        else:
            return

## Setup client

client = mqtt.Client(client_id="console_actuator_indicators", clean_session=True)
client.on_connect = on_connect
client.on_message = on_message

## Connect and keep retrying on failure

try:
    client.connect(broker, 1883, 60)
except (KeyboardInterrupt, SystemExit):
    raise
except:
    print "Failed to connect to broker"
    time.sleep(1)

## Run loop and wait for messages

client.loop_forever()
